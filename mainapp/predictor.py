from email.mime import base
import numpy as np
from math import sqrt, ceil
import cv2
from keras.preprocessing.image import ImageDataGenerator
import keras
from pathlib import Path

def get_key(dictionary, val):
    for key, value in dictionary.items():
         if val == value:
             return key
 
    return "key doesn't exist"


def malware_detector(file):
    # convert malware to image
    with open(file, 'rb') as binary_file:        
        data = binary_file.read()
    data_len = len(data)
    d = np.frombuffer(data, dtype=np.uint8)
    sqrt_len = int(ceil(sqrt(data_len)))
    new_len = sqrt_len*sqrt_len
    pad_len = new_len - data_len
    padded_d = np.hstack((d, np.zeros(pad_len, np.uint8)))
    im = np.reshape(padded_d, (sqrt_len, sqrt_len))
    base_loc = Path(__file__).resolve().parent.parent
    cv2_image_loc = str(base_loc) + '/mainapp/detection_image/file/malware.png'
    cv2.imwrite(cv2_image_loc, im)

    # Generate Image Data
    batch_3_directory = str(base_loc) + '/mainapp/detection_image'
    batch_3 = ImageDataGenerator().flow_from_directory(directory=batch_3_directory, target_size=(64,64), batch_size=10000)
    image_2, label = next(batch_3)

    # load model
    model_location = str(base_loc) + '/mainapp/models/malware_detector_new_ds_5.h5'
    Malware_detector = keras.models.load_model(model_location)

    # Predict malware type
    y_pred_new = Malware_detector.predict(image_2, verbose=0)
    print(y_pred_new)

    # Convert it into understandable data
    position = np.where(max(y_pred_new))
    print(position[0])
    new_arr = []
    for i in position[0]:
        new_arr.append(y_pred_new[0][i])
    print(max(new_arr))
    position_m = np.where(y_pred_new == max(new_arr))
    position_1 = position_m[1][0]
    print(position_1)
    
    dictionary = {"Adialer.C": '0', "Agent.FYI": '1', "Allaple.A": '2', "Allaple.L": '3', "Alueron.gen!J": '4', "Autorun.K": '5', "C2LOP.P": '6', "C2LOP.gen!g": '7', "Dialplatform.B": '8', "Dontovo.A": '9', "Fakerean": '10', "Gatak": '11', "Instantaccess": '12', "Kelihos_ver1": '13', "Kelihos_ver3": '14', "Lollipop": '15', "Lolyda.AA1": '16', "Lolyda.AA2": '17', "Lolyda.AA3": '18', "Lolyda.AT": '19', "Malex.gen!J": '20', "Obfuscator.ACY": '21', "Obfuscator.AD": '22', "Ramnit": '23', "Rbot!gen": '24', "Simda": '25', "Skintrim.N": '26', "Swizzor.gen!E": '27', "Swizzor.gen!I": '28', "Tracur": '29', "VB.AT": '30', "Vundo": '31', "Wintrim.BX": '32', "Yuner.A": '33', "No Malware": '34'}
    # type_detail = dictionary[str(position_1)]
    type_detail = get_key(dictionary=dictionary, val=str(position_1))
    type_malware = {'Dialer': ['Adialer.C', 'Dialplatform.B', 'Instantaccess'],
                    'Backdoor': ['Agent.FYI', 'Rbot!gen', 'Simda', 'Tracur'],
                    'Worm': ['Allaple.A', 'Allaple.L', 'Alueron.gen!J', 'Autorun.k', 'AutoIT', 'VB.AT', 'Yuner.A'],
                    'Trojan': ['C2LOP.P', 'C2LOP.gen!g', 'Malex.gen!J', 'Skintrim.N', 'Ramnit', 'Vundo', 'Gatak', 'Fakerean'],
                    'Trojan Downloader': ['Dontovo.A', 'Obfuscator.AD', 'Swizzor.gen!E', 'Swizzor.gen!I', 'Wintrim.BX', 'Obfuscator.ACY'],
                    'PWS': ['Lolyda.AA1', 'Lolyda.AA2', 'Lolyda.AA3', 'Lolyda.AT'],
                    'No Malware': ['No Malware'],
                    'Adware': ['Lollipop'],
                    'Botnet': ['Kelihos_ver3', 'Kelihos_ver1']
                    }

    for i in type_malware:
        if type_detail in type_malware[i]:
            print('********************************************************')
            print('********************************************************')
            print('********************************************************')
            print("%&%&%&%&%&%&%&%&%&", i, type_detail, "%&%&%&%&%&%&%&%&%&")
            print('********************************************************')
            print('********************************************************')
            print('********************************************************')
            return(i, type_detail)
            break